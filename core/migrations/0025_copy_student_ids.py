# Generated by Django 5.1.7 on 2025-08-24 07:28

from django.db import migrations


def copy_student_ids(apps, schema_editor):
    """Copy student_id data from UserIdentification to UserProfile.comet_card_serial_number"""
    UserIdentification = apps.get_model('events', 'UserIdentification')
    UserProfile = apps.get_model('core', 'UserProfile')
    
    for user_id_obj in UserIdentification.objects.iterator():
        try:
            profile = UserProfile.objects.get(user=user_id_obj.user)
            profile.comet_card_serial_number = user_id_obj.student_id
            profile.save()
        except UserProfile.DoesNotExist:
            # This case is unlikely if you have a signal creating UserProfiles
            # for every User, but it's good practice to handle it.
            pass


def reverse_copy_student_ids(apps, schema_editor):
    """Reverse operation - copy data back from UserProfile to UserIdentification"""
    UserIdentification = apps.get_model('events', 'UserIdentification')
    UserProfile = apps.get_model('core', 'UserProfile')
    
    for profile in UserProfile.objects.filter(comet_card_serial_number__isnull=False):
        try:
            UserIdentification.objects.get_or_create(
                user=profile.user, 
                defaults={'student_id': profile.comet_card_serial_number}
            )
        except Exception:
            # Handle any conflicts or errors gracefully
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0024_userprofile_comet_card_serial_number_and_more'),
        ('events', '0025_remove_combatrobot_combat_events_and_more'),  # Latest events migration before removing UserIdentification
    ]

    operations = [
        migrations.RunPython(copy_student_ids, reverse_copy_student_ids),
    ]
